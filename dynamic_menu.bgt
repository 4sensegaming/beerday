class dynamic_menu_item
{
string ui_name, name, description;
uint8 section, checked;
bool is_submenu, disabled;

dynamic_menu_item()
{
ui_name="";
name="";
section=1;
description="";
checked=2;
is_submenu=false;
disabled=false;
}

int opCmp (dynamic_menu_item@ other)
{
uint8 me=this.section, you=other.section;
if (me>you) return 1;
else if (me==you) return 0;
return -1;
}
}

class dynamic_menu
{
bool wrap, allow_escape, enable_home_and_end, speak_item=false;
uint8 part, old_part;

dynamic_menu()
{
running=false;
item_list.reserve (1000);
reset(true);
}

int get_item_count()
{
return item_list.length();
}

int get_position()
{
if(!running) return -1;
return menu_position;
}

bool is_running()
{
return running;
}

bool set_callback(menu_callback@ callback, string user_data)
{
@callback_handle=@callback;
callback_data=user_data;
return true;
}

string get_item_name(int menu_item)
{
if(menu_item<1 or menu_item>item_list.length()) return "";
return item_list[menu_item-1].name;
}

string get_item_ui_name(int menu_item)
{
if(menu_item<1 or menu_item>item_list.length()) return "";
return item_list[menu_item-1].ui_name;
}

string get_item_description(int menu_item)
{
if(menu_item<1 or menu_item>item_list.length()) return "";
return item_list[menu_item-1].description;
}

int get_item_section (int menu_item)
{
if(menu_item<1 or menu_item>item_list.length()) return 1;
return string_to_number(item_list[menu_item-1].section);
}

bool configure_joystick(joystick@ new_stick=null, int ok_button=-1, int cancel_button=-1)
{
if(ok_button>-1 && cancel_button==ok_button) return false;
@stick=@new_stick;
stick_ok=ok_button;
stick_cancel=cancel_button;
return true;
}

void say_checked (dynamic_menu_item@ item)
{
if (item.checked<2)
{
string msg;
if (item.checked==1)
{
if (is_optionsmenu) msg="Zapnuto";
else msg="Zaškrtnuto";
}
else
{
if (is_optionsmenu) msg="Vypnuto";
else msg="Nezaškrtnuto";
}
say (msg, false, false, false, false);
}
}

int run (string intro, int start_position, bool auto_speak_first, bool rerun=false)
{
if(running) return -1;
int item_count=item_list.length();
if(item_count==0) return -1;
if(start_position>item_count) return -1;
menu_position=start_position;
if(start_position<1 && auto_speak_first) return -1;
int stick_aim=0;
int stick_last_aim=0;
if (intro!="" and (speak_menu_prompt or question!="") and !rerun) say (intro, true, false, false, false);
else if (!speak_menu_prompt and !rerun and !is_custmenu) silence();
if (play_menu_sounds and !rerun) play_inmenu();
if (rerun)
{
part=item_list[menu_position-1].section;
old_part=part;
}
item_list.sort_ascending();
if (auto_speak_first and !rerun) speak_item=true;
if (is_custmenu and !rerun) custchanged=true;
running=true;
if (@top_menu!=@this) @top_menu=@this;
frame.restart();
while(true)
{
wait(5);
if (frame.elapsed >= 1000/fps)
{
frame.restart();
// Invoke the user callback.
if(@callback_handle!=null)
{
int callback_result=callback_handle(this, callback_data);
if(callback_result!=0)
{
if (@top_menu==@this) @top_menu=null;
return callback_result;
}
}

// Check to see if there's an item that needs to be spoken.
if(speak_item)
{
if (is_custmenu) custchanged=true;
if (item_list[menu_position-1].is_submenu and play_menu_sounds and play_submenu) play_submenu();
if (@sections!=null and part!=old_part)
{
string section_name=get_section_name (item_list[menu_position-1]);
bool comma=false;
int found=-1;
if (@sections!=null) found=sections.find (section_name);
if (section_name !="" and section_name!=" ")
{
comma=true;
section_name="Záložka "+section_name;
}
if (speak_menu_position)
{
if (comma) section_name+=", ";
if (found>-1) section_name+=(found+1);
else section_name+=item_list[menu_position-1].section;
section_name+=" z "+has_sections()+" ";
uint l=item_list.length(), count=0;
for (uint i=0; i<l; i++)
if (item_list[i].section==item_list[menu_position-1].section) count++;
if (count==1) section_name+="s jednou položkou";
else if (count>0 and count<5) section_name+="se "+count+" položkami";
else if (count>0) section_name+="s "+count+" položkami";
if (!instr (section_name, "Záložka")) section_name="Záložka "+section_name;
}
say (section_name, false, false, false, false);
}
if (item_list[menu_position-1].ui_name!="") say (item_list[menu_position-1].ui_name, false, false, false, false);
if (item_list[menu_position-1].disabled) say ("Zamèeno", false, false, false, false);
if (speak_menu_position)
{
string mp="";
uint8 sec=has_sections();
if (sec>1) mp+="Položka ";
mp+=get_position()+" z "+get_item_count();
say (mp, false, false, false, false);
}
say_checked (item_list[menu_position-1]);
if (item_list[menu_position-1].description!="") say (item_list[menu_position-1].description, false, false, false, false);
if (item_list[menu_position-1].is_submenu and speak_submenu) say ("podnabídka", false, false, false, false);
speak_item=false;
if (part!=old_part)
{
part=item_list[menu_position-1].section;
old_part=part;
}
}

// Use the act variable for triggering movement up and down, and for choosing ok and cancel.
bool act=false;
if(singlekey(KEY_RETURN)||singlekey(KEY_NUMPADENTER))
if ((!is_statmenu and !is_readmenu) or instr (item_list[menu_position-1].name, "copy") or instr (item_list[menu_position-1].name, "clear") or question!="" or instr (item_list[menu_position-1].name, "http")) act=true;
if(@stick!=null && stick_ok>=0)
{
if(stick.button_pressed(stick_ok)) act=true;
}
if(act)
{
if(menu_position!=0)
{
silence();
if (!is_learnmenu) play_enter();
if (item_list[menu_position-1].disabled)
{
play_stat ("error");
act=false;
continue;
}
if (item_list[menu_position-1].checked<2)
{
if (item_list[menu_position-1].checked==0) item_list[menu_position-1].checked=1;
else item_list[menu_position-1].checked=0;
say_checked (item_list[menu_position-1]);
}
running=false;
if (@top_menu==@this) @top_menu=null;
return menu_position;
}
}
act=false;
if(allow_escape==true)
{
if(singlekey(KEY_ESCAPE)) act=true;
if(@stick!=null && stick_cancel>=0)
{
if(stick.button_pressed(stick_cancel)) act=true;
}
if(act)
{
play_esc();
running=false;
if (@top_menu==@this) @top_menu=null;
return 0;
}
}
else if (singlekey (KEY_ESCAPE) and onboarding and question=="")
{
play_stat ("error");
say ("Další postup potvrï tlaèítkem Pokraèovat na konci nabídky.", true, false);
}
act=false;

// Determine where the joystick is aimed.
if(@stick!=null)
{
if(stick.y<-150) stick_aim=1; // Up.
else if(stick.y>150) stick_aim=2; // Down.
else stick_aim=0;
if(stick_aim==0) stick_last_aim=0;
if(stick_last_aim!=0) stick_aim=0;
else stick_last_aim=stick_aim;
}
if (!alt)
{
bool tab=lone (KEY_TAB) and !ctrl;
if (left or up or (tab and shift) or stick_aim==1)
{
if(menu_position==0)
{
menu_position=item_count;
part=item_list[menu_position-1].section;
silence();
speak_item=true;
if (is_custmenu) custchanged=true;
continue;
}
if (ctrl)
{
skip_section (false);
continue;
}
if(menu_position==1)
{
if(wrap==true)
{
play_turn();
menu_position=item_count;
part=item_list[menu_position-1].section;
speak_item=true;
if (is_custmenu) custchanged=true;
continue;
}
else
{
play_stat ("edge", false, false, menu_sounds_vol);
continue;
}
}
play_move();
menu_position-=1;
part=item_list[menu_position-1].section;
speak_item=true;
if (is_custmenu) custchanged=true;
continue;
}
else if (right or down or tab or stick_aim==2)
{
if (ctrl)
{
skip_section (true);
continue;
}
if(menu_position==item_count)
{
if(wrap==true)
{
play_turn();
menu_position=1;
part=item_list[menu_position-1].section;
speak_item=true;
if (is_custmenu) custchanged=true;
continue;
}
else
{
play_stat ("edge", false, false, menu_sounds_vol);
continue;
}
}
play_move();
menu_position+=1;
part=item_list[menu_position-1].section;
speak_item=true;
if (is_custmenu) custchanged=true;
continue;
}
if(enable_home_and_end==true)
{
if(inc and keys==1)
{
if (menu_position!=1)
{
play_move();
menu_position=1;
part=item_list[menu_position-1].section;
speak_item=true;
if (is_custmenu) custchanged=true;
continue;
}
else play_stat ("edge", false, false, menu_sounds_vol);
}
if(dec and keys==1)
{
if (menu_position!=item_count)
{
play_move();
menu_position=item_count;
part=item_list[menu_position-1].section;
speak_item=true;
if (is_custmenu) custchanged=true;
continue;
}
else play_stat ("edge", false, false, menu_sounds_vol);
}
}
}
}
}
running=false;
return -1;
}

bool reset(bool completely)
{
item_list.resize(0);
part=1;
old_part=0;
@sections=null;
speak_item=false;
if(completely==true)
{
wrap=true;
allow_escape=true;
enable_home_and_end=false;
@callback_handle=null;
@stick=null;
}
return true;
}

// The following is private content and should not be modified from the outside.

menu_callback@ callback_handle;
string callback_data;
bool running;
int menu_position;
dynamic_menu_item[] item_list;
joystick@ stick;
int stick_ok;
int stick_cancel;
string[]@ sections;

int add_item_tts(string name, string ui_name, string description="", uint8 section=1, uint8 checked=2, bool submenu=false, bool disabled=false)
{
if(running==true) return -1;
if (description==" ") description="";
if (section==0) section=1;
dynamic_menu_item new;
new.ui_name=ui_name;
new.name=name;
new.description=description;
new.section=section;
new.checked=checked;
new.is_submenu=submenu;
new.disabled=disabled;
item_list.insert_last (new);
return item_list.length()+1;
}

void skip_section (bool inc)
{
if (has_sections()==1)
{
play_stat ("edge", false, false, menu_sounds_vol);
return;
}
uint l=item_list.length();
for (uint i=0; i<l; i++)
{
if (inc and item_list[i].section>part)
{
part=item_list[i].section;
menu_position=i+1;
silence();
if (is_custmenu) custchanged=true;
play_move();
speak_item=true;
return;
}
if (!inc)
{
bool proceed=true;
uint8 search=part;
while (search-1 >0)
{
search--;
if (has_section(search))
{
proceed=false;
break;
}
}
if (proceed) break;
if (item_list[i].section==search)
{
part=item_list[i].section;
menu_position=i+1;
silence();
if (is_custmenu) custchanged=true;
play_move();
speak_item=true;
return;
}
}
}
play_stat ("edge", false, false, menu_sounds_vol);
}

uint has_sections()
{
return item_list[item_list.length()-1].section;
}

bool has_section (uint8 number)
{
uint l=item_list.length();
for (uint i=0; i<l; i++)
if (item_list[i].section==number) return true;
return false;
}

string get_section_name (dynamic_menu_item@ item)
{
int section=item.section-1;
if (@sections==null or has_sections()<2 or sections.is_empty() or section<0 or section>=sections.length()) return "";
return sections[section];
}
}

funcdef int menu_callback(dynamic_menu@, string);