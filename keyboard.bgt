bool ctrl=false, shift=false, alt=false, left=false, right=false, up=false, down=false, inc=false, dec=false, keyhelp=false, foreground=true, old_foreground=true;
uint keys;

void keyboard()
{
closekey();
if (singlekey (KEY_ESCAPE))
{
if (ask ("Ukonèit tuto hru?", false, false) == 1)
{
is_game=false;
pool.destroy_all();
things.destroy_all();
if (autoplay) clear_autoplay_earnings();
make_stats (true);
reset_objects();
autoplay=false;
endless=false;
elapsed=0;
paused=false;
menus();
}
}
else if (singlekey (KEY_P))
{
if (!paused) pause();
else resume();
}
else if (singlekey (KEY_E)) say_earned();
else if (singlekey (KEY_T)) say_game();
else if (lone (KEY_C) and !alt)
{
if (!ctrl and !shift) say_customers();
else if (!ctrl and shift) track_menu();
else if (ctrl and !shift) name_local_customer();
}
else if (lone (KEY_L) and !ctrl and !alt)
{
if (!shift) say_fled();
else say_thrown();
}
else if (singlekey (KEY_F)) say (say_pipe (false), true, false);
else if (singlekey (KEY_S)) say ("Schody jsou "+say_distance (stairs, 0, false), true, false);
else if (singlekey (KEY_D)) say (say_door (false), true, false);
else if (singlekey (KEY_I)) say (say_sink (false), true, false);
else if (singlekey (KEY_H)) say (player.say_health(), true, false);
else if (lone (KEY_M) and !alt)
{
if (shift and !ctrl) say_mug (true, true, player.hand);
else if (ctrl and !shift) say (count_mugs (player), true, false);
else if (!ctrl and !shift) say_mugs();
}
else if (lone (KEY_B))
{
if (!ctrl and !shift and !alt) say (say_barrel(), true, false);
else if (!ctrl and shift and !alt) say_broken_barrels();
else if (ctrl and !shift and !alt) say_replaced_barrels();
else if (!ctrl and !shift and alt) say_misplaced_barrels();
}
else if (singlekey (KEY_SPACE)) info();
else if (singlekey (KEY_G)) say_given();
else if (lone (KEY_U) and !alt)
{
if (!shift and !ctrl) say_dirty();
else if (shift and !ctrl) say_broken_mugs();
else if (ctrl and !shift) say_nonempty();
}
else if (lone (KEY_Q) and !ctrl and !alt)
{
if (!shift) say_queue();
else say_queue_count();
}
for (uint8 i=0; i<10; i++)
if (lone (rowkeys[i], 3) or lone (numkeys[i], 3))
{
if (queue.length() < numvals[i]+1)
{
if (queue.is_empty()) say ("Nikdo ve frontì.", true, false);
else say ("Tolik zákazníkù ve frontì není.", true, false);
}
else
{
character@ h=queue[numvals[i]];
if (ctrl and !alt)
{
if (@tracking == @h) untrack();
else start_tracking (h);
}
else if (!ctrl and alt) say ("Chce "+h.get_drink(), true, false);
else if (!ctrl and !alt) say_customer (h, true, true);
else if (ctrl and alt) name_customer_manually (h);
}
break;
}
else if (singlekey (KEY_J)) say (say_jukebox (false), true, false);
else if (singlekey (KEY_APPS) or singlekey (KEY_SYSRQ) or (lone (KEY_F10) and shift and !ctrl and !alt)) con();
else if (singlekey (KEY_TAB)) player_position();
else if (singlekey (KEY_F1)) help();
else if (singlekey (KEY_F2)) options();
else if (singlekey (KEY_F3)) learn();
if (use_history) history_keys();
if (enable_debugging and singlekey (debugging_key)) debug_menu();
if (autoplay) return;
if (!paused)
{
if (left and keys <= 2 and !shift and !alt)
{
if (!ctrl) player.walk (0);
else player.set_pipe (false);
}
else if (right and keys <= 2 and !shift and !alt)
{
if (!ctrl) player.walk (1);
else player.set_pipe (true);
}
else if (up and keys <= 3 and !alt)
{
if (!ctrl and !shift) player.walk (2);
else if (ctrl and !shift) set_mug (player.holding+1);
else if (ctrl and shift) set_mug (player.carrying.length()-1);
}
else if (down and keys <= 3 and !alt)
{
if (!ctrl and !shift) player.walk (3);
else if (ctrl and !shift) set_mug (player.holding-1);
else if (ctrl and shift) set_mug (0);
}
else if ((key_pressed (KEY_RETURN) or key_pressed (KEY_NUMPADENTER)) and keys <= 2 and !ctrl and !alt)
{
if (keys == 1) action();
else if (shift)
{
if (@player.hand!=null) player.give_mug();
else if (player.x==radio and player.y==0)
{
if (@player.has_barrel!=null)
{
error ("Nemùžeš pustit jukebox, když neseš sud.");
return;
}
gallery (true);
}
}
}
}
}

void modifiers()
{
foreground=is_game_window_active();
if (!foreground and foreground!=old_foreground)
{
if (pause_on_blur)
{
if (output==0 and sapi.speaking) silence();
if (is_custmenu) silence_custmenu();
if (!paused and is_game) pause();
if (menuloop.playing) stop_menu_music();
else if (won.playing) won.pause();
}
else
{
double cur=get_sound_master_volume();
cur=loudness-10;
if (cur<minvol) cur=minvol;
set_sound_master_volume (cur);
}
}
else if (foreground and foreground!=old_foreground)
{
if (pause_on_blur)
{
if (menuloop.paused) menuloop.play_looped();
else if (won.paused) won.play();
}
else set_sound_master_volume(loudness);
}
output_check_frames++;
if (output_check_frames >= 3) checkup();
if (foreground and foreground!=old_foreground and (menu.running or question!="" or is_optionsmenu or is_learnmenu or is_conmenu or is_custmenu or is_statmenu or is_readmenu))
{
wait_keys();
if (output>0) silence();
if (@top_menu!=null)
{
if (question!="") say (question, true, false);
top_menu.speak_item=true;
}
}
old_foreground=foreground;
if ((key_down (KEY_LCONTROL) or key_down (KEY_RCONTROL) or key_down (KEY_RMENU)) and !ctrl) ctrl=true;
else if (ctrl and !key_down (KEY_LCONTROL) and !key_down (KEY_RCONTROL) and !key_down (KEY_RMENU)) ctrl=false;
if ((key_down (KEY_LSHIFT) or key_down (KEY_RSHIFT)) and !shift) shift=true;
else if (shift and !key_down (KEY_LSHIFT) and !key_down (KEY_RSHIFT)) shift=false;
if ((key_down (KEY_LMENU) or key_down (KEY_RMENU)) and !alt) alt=true;
else if (alt and !key_down (KEY_LMENU) and !key_down (KEY_RMENU)) alt=false;
if (keyhelp) return;
if (singlekey (KEY_DELETE) or (ctrl and shift and alt and keys == 3))
{
silence();
if (is_custmenu) silence_custmenu();
}
if (key_pressed (KEY_LEFT) and !left) left=true;
else if (left) left=false;
if (key_pressed (KEY_RIGHT) and !right) right=true;
else if (right) right=false;
if (key_pressed (KEY_UP) and !up) up=true;
else if (up) up=false;
if (key_pressed (KEY_DOWN) and !down) down=true;
else if (down) down=false;
if (key_pressed (KEY_HOME) and !inc) inc=true;
else if (inc) inc=false;
if (key_pressed (KEY_END) and !dec) dec=true;
else if (dec) dec=false;
}

void closekey()
{
modifiers();
keys=keys_down().length();
if (!foreground or onboarding) return;
if (alt and lone (KEY_F4) and !ctrl and !shift)
{
if (question == "Ukonèit program?") return;
if (ask ("Ukonèit program?", false, !is_game) == 1)
{
stop_menu_music();
silence (true);
quit();
}
}
}

bool singlekey (int key)
{
if (key_pressed (key) and keys_down().length() == 1) return true;
return false;
}

bool lone (int key, uint8 length=2)
{
if (key_pressed (key))
{
if (length == 0 or keys_down().length() <= length) return true;
return false;
}
return false;
}

void wait_keys()
{
garbage_collect();
frame.restart();
while (true)
{
wait(5);
if (frame.elapsed >= 1000/fps)
{
frame.restart();
get_characters();
if (keys_down().length() == 0) break;
}
}
keys=0;
ui_help_frames=0;
}

void history_keys()
{
if (alt or keys > 3) return;
if (lone (KEY_W, 3))
{
if (history.is_empty()) say ("Dosud nic neøeèeno.", true, false, false, false);
else if (!ctrl and !shift) say (history[history_index], true, false, false, false);
else if (ctrl and !shift) copy (history[history_index]);
else if (!ctrl and shift) spell (history[history_index]);
else if (ctrl and shift) read_menu (history[history_index]);
}
bool pressed=false;
if (inc)
{
silence();
if (history.is_empty()) say ("Dosud nic neøeèeno.", true, false, false, false);
else if (keys == 1 and history_index != 0)
{
history_index=0;
pressed=true;
}
else history_edge();
}
else if (dec)
{
silence();
if (history.is_empty()) say ("Dosud nic neøeèeno.", true, false, false, false);
if (keys == 1 and history_index != history.length()-1)
{
history_index=history.length()-1;
pressed=true;
}
else history_edge();
}
else if (singlekey (KEY_PRIOR))
{
silence();
if (history.is_empty()) say ("Dosud nic neøeèeno.", true, false, false, false);
if (history_index > 0)
{
pressed=true;
history_index--;
}
else history_edge();
}
else if (singlekey (KEY_NEXT))
{
silence();
if (history.is_empty()) say ("Dosud nic neøeèeno.", true, false, false, false);
if (history_index < history.length()-1)
{
history_index++;
pressed=true;
}
else history_edge();
}
if (pressed and !history.is_empty() and history_old_index != history_index)
{
history_old_index=history_index;
bool first=true;
if (history_index == 0)
{
say ("Nejnovìjší.", true, false, false, false);
first=false;
}
else if (history_index == history.length() -1)
{
say ("Nejstarší.", true, false, false, false);
first=false;
}
say (history[history_index], first, false, false, false);
}
}

void history_edge()
{
if (!history.is_empty()) play_stat ("edge");
}