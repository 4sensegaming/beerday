bool encrypt=true;
string pack_name="../pack.dat";
string pack_folder="../pack/";
string key="Jedno pivooo, dvì pivaaa, tøi pivaaa, ètyøi pivaaa, pìt, šest, sedum, vosum piiiv, devìt, deset piiiv.";
string[] skip={"nvda.dll"};
string[] encrypt_as_string={"help.dat", "navchars.dat", "tutorial.dat", "objectives.dat", "tips.dat", "credits.dat", "stats.dat", "soundtrack.dat", "names.dat", "voices.dat"};
// Don't touch the following!
string folder;
pack_file pack;
string[] names;
string error="\r\nThe pack could not be created.";

void main()
{
show_game_window ("Packer");
if (encrypt and key == "")
{
string cliptext=clipboard_read_text();
if (cliptext != "")
{
uint8 q=question ("The following text has been found in the clipboard: "+cliptext, "Do you wish to encrypt the files in the pack with this string using the obfuscation function declared lower down in the script code?");
if (q == 1)
{
encrypt=true;
key=cliptext;
}
}
}
if (encrypt and key == "")
{
uint8 q=question ("Error!", "In the global variables declaration, it's stated that files in the pack should be encrypted, but no string to be used as the encryption key has been found. Do you wish to manually enter the required key string? If no encryption key is entered, the files in the pack cannot be encrypted.");
if (q == 1)
{
key=input_box ("Enter the encryption key:", "Enter the string that will be used as the encryption key. During the actual encryption process for every individual file, this string will be obfuscated according to the mentioned function declared further below in the code.");
if (key == "") encrypt=false;
}
else encrypt=false;
}
while (pack_name == "")
{
pack_name=input_box ("Error!", "The pack file name to be used is not declared in the code. Enter the required name now.");
if (get_last_error() != 0) quit();
}
while (pack_folder == "")
{
pack_folder=input_box ("Error!", "No string is declared in the code that should be used as the name of the folder containing the files to be packed. Enter the required name of the folder where the files that should be packed are located.");
if (get_last_error() != 0) quit();
}
if (pack_folder[pack_folder.length()-1] != "/" and pack_folder[pack_folder.length()-1] != "\\") pack_folder+="/";
names.reserve (1000000);
skip.reserve (1000000);
encrypt_as_string.reserve (1000000);
if (encrypt and skip.is_empty()) skip=string_split (input_box ("Files to skip:", "You may optionally enter the names of any files that you wish to be excluded from the encryption phase before they are added to the actual pack. Separate the individual file names with semicolons. If no individual file names are entered or you use any other delimiter than semicolon, all files found in the source folder will be encrypted."), ";", true);
if (encrypt and encrypt_as_string.is_empty()) encrypt_as_string=string_split (input_box ("Encrypt as string:", "You may optionally enter the names of any files that you wish to be encrypted as strings rather than directly as files. Any files you enter here will first be read into memory in their entirety and then written into a new file, ready for packing. However, the contents of this new version of the file will be encrypted with the string_encrypt function before the new copy of the file is actually saved. This can be useful if you wish to have encrypted data files in your pack that can be manipulated directly inside your final game executable, without the need to be extracted to some location on the disk. Just like above, separate the individual file names with semicolons. If another delimiter is used or nothing is entered, no files will be processed this way and they will instead be encrypted directly as files, unless they should be skipped entirely. If a file is to be skipped, entering its name here will have no effect at all and the file will just be skipped during the encryption phase."), ";", true);
if (encrypt)
{
folder="../enc/";
directory_create (string_trim_right (folder, 1));
}
pack.create (pack_name);
names=find_files (pack_folder+"*.*");
uint l=names.length();
for (uint x=0; x<l; x++)
if (names[x] == "packer.bgt")
{
names.remove_at (x);
l--;
}
if (encrypt)
{
for (uint x=0; x<l; x++)
{
if (skip.find (names[x]) > -1) continue;
if (encrypt_as_string.find (names[x]) == -1 and !file_encrypt (pack_folder+names[x], folder+names[x], scramble()))
{
alert ("Error!", "The file " + names[x] + " could not be encrypted. Reason:\r\n" + get_last_error_text()+error);
quit();
}
else if (encrypt_as_string.find (names[x]) > -1 and !eas (names[x]))
{
alert ("Error!", "The file "+names[x]+" could not be encrypted as a string. Reason:\r\n"+get_last_error_text()+error);
quit();
}
}
}
for (uint x=0; x<l; x++)
if (!add (names[x], skip.find (names[x]) > -1))
{
alert ("Error!", "The file " + names[x] + " could not be packed. Reason:\r\n" + get_last_error_text()+error);
quit();
}
pack.close();
if (!directory_delete (string_trim_right (folder, 1))) alert ("Error!", "Temporary encrypted files could not be deleted. Reason:\r\n" + get_last_error_text());
pack.open (pack_name);
string report="The pack contains "+pack.get_file_count()+" file(s) altogether";
uint8 list=question (report+".", "Do you wish to list all the file names for verification?");
if (list == 1)
{
names=pack.list_files();
string text;
l=names.length();
for (uint x=0; x<l; x++)
{
text+=names[x];
if (skip.find (names[x]) > -1) text+=" (unencrypted)";
if (encrypt_as_string.find (names[x]) > -1) text+=" (encrypted as a string)";
if (x < names.length()-1) text+="\r\n";
}
pack.close();
alert ("File name list:", text+"\r\nThis list has also been copied to the clipboard for better convenience.");
clipboard_copy_text (report+":\r\n"+text);
}
uint8 q=question ("Delete source folder", "Do you wish to completely delete the folder containing all the original files in their unpacked, unencrypted format?");
if (q == 1) directory_delete (string_trim_right (pack_folder, 1));
}

bool add (string file, bool skipped)
{
if (encrypt and !skipped) return pack.add_file (folder+file, file);
return pack.add_file (pack_folder+file, file);
}

bool eas (string file)
{
file src, dest;
if (!src.open (pack_folder+file, "rb")) return false;
if (!dest.open (folder+file, "wb")) return false;
if (dest.write (string_encrypt (src.read(), scramble())) == 0) return false;
return true;
}

void quit()
{
pack.close();
file_delete (pack_name);
if (encrypt) directory_delete (string_trim_right (folder, 1));
exit();
}

// Encryption key obfuscation function
string scramble()
{
string temp=string_reverse (key);
temp=string_replace (temp, "a", "\0", true);
string result;
uint l=temp.length();
for (uint i=0; i<l; i++) result+="" + character_to_ascii (temp[i]+46);
return result;
}